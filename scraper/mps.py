# This file provides a simple way to get a list of all sitting MPs
# This is intended to be used to populate the 'member' table in the database

# Boilerplate to make relative imports work when this is run as a standalone script
if __name__ == "__main__" and __package__ is None:
    import sys, os
    parent_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    sys.path.insert(1, parent_dir)
    __package__ = str("scraper")

from .utilities import Locators

from playwright.sync_api import sync_playwright, Page, Locator

from dataclasses import dataclass
from typing import List

@dataclass 
class Member:
    name: str
    party: str
    electorate: str
    date: str

mp_url = r"https://www.parliament.nz/en/mps-and-electorates/members-of-parliament/"

# Mapping from the party name on the page to the ones in my database 
party_map = {
    "Labour Party": "Labour",
    "National Party": "National",
    "ACT Party": "ACT",
    "Green Party": "Green",
    "Te Paati Māori": "Māori",
}

# Flip first and last name by breaking at the comma and switching order
def flip_name(name: str) -> str:
    parts = name.split(", ")
    return f"{parts[1]} {parts[0]}"


def make_member_from_row(page: Page, row: Locator) -> Member:
    cells = [cell for cell in Locators(page, row.locator("td"))]
    assert len(cells) == 5, "Unexpected number of table columns in MP scraper"

    return Member(
        name = flip_name(cells[1].inner_text()),
        party = party_map[cells[2].inner_text()],
        electorate = cells[3].inner_text(),
        date = cells[4].inner_text(),
    )

def get_mps(page: Page) -> List[Member]:
    table = page.locator(".main table.table--list")
    mp_rows = Locators(page, table.locator("tr.list__row"))
    return [make_member_from_row(page, row) for row in mp_rows]


def scrape() -> List[Member]:
    with sync_playwright() as p:
        browser = p.firefox.launch()
        page = browser.new_page()
        page.goto(mp_url)

        mps = get_mps(page)
        browser.close()
        return mps

# The remainder of the file is creates an sql statement suitable for populating 
# the memeber database

# NOTE: Since this statement is created using raw string interpolation with external data 
# it should be manually inspected before running

def make_insert_tuple(mp: Member) -> str:
    # we need to make sure that single quotes in names are escaped
    escaped = mp.name.replace("'", "''")
    return f"('{escaped}', '{mp.party}')"

def make_populate_script(mps: List[Member]):
    values_list = ",\n    ".join([make_insert_tuple(mp) for mp in mps])
    return f"""
-- This scrip is generated by scraper/mp.py using data from:
-- https://www.parliament.nz/en/mps-and-electorates/members-of-parliament/
WITH members_list (name, party) AS 
( VALUES 
    {values_list}
)
INSERT INTO member 
    (name, party_id)
SELECT 
    members_list.name, party.party_id
FROM 
    party JOIN members_list
    ON members_list.party = party.name;
"""

mps = scrape()
print(make_populate_script(mps))
